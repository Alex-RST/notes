import{_ as l,c as a,a0 as s,o as e}from"./chunks/framework.DpdyRgfY.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/redis.md","filePath":"src/redis.md"}'),t={name:"src/redis.md"};function n(h,i,r,d,p,o){return e(),a("div",null,i[0]||(i[0]=[s(`<h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><ul><li>String</li><li>List</li><li>Hash</li><li>Set</li><li>Zset</li><li>Geospatial</li><li>Hyperloglog</li><li>Bitmap：位存储</li></ul><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="缓存穿透" tabindex="-1">缓存穿透 <a class="header-anchor" href="#缓存穿透" aria-label="Permalink to &quot;缓存穿透&quot;">​</a></h3><p><strong>产生原因</strong>： 客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会访问数据库。导致DB的压力瞬间变大而卡死或者宕机。</p><ul><li>大量的高并发的请求打在redis上</li><li>这些请求发现redis上并没有需要请求的资源，redis命中率降低</li><li>因此这些大量的高并发请求转向DB请求对应的资源</li><li>DB压力瞬间增大，直接将DB打垮，进而引发一系列“灾害”。</li></ul><p><strong>解决方案</strong>：</p><ol><li><a href="./布隆过滤器.html" title="布隆过滤器">布隆过滤器</a>。使用BitMap作为布隆过滤器，将目前所有可以访问到的资源通过简单的映射关系放入到布隆过滤器中（哈希计算），当一个请求来临的时候先进行布隆过滤器的判断，如果有那么才进行放行，否则就直接拦截。</li><li><strong>接口校验</strong>。类似于用户权限的拦截，对于id = -3872这些无效访问就直接拦截，不允许这些请求到达Redis、DB上。</li><li><strong>对空值进行缓存</strong>。比如，虽然数据库中没有id = 1022的用户的数据，但是在redis中对其进行缓存（key=1022, value=null），这样当请求到达redis的时候就会直接返回一个null的值给客户端，避免了大量无法访问的数据直接打在DB上。</li><li><strong>实时监控</strong>。对redis进行实时监控，当发现redis中的命中率下降的时候进行原因的排查，配合运维人员对访问对象和访问数据进行分析查询，从而进行黑名单的设置限制服务(拒绝黑客攻击)。</li></ol><h3 id="缓存击穿" tabindex="-1">缓存击穿 <a class="header-anchor" href="#缓存击穿" aria-label="Permalink to &quot;缓存击穿&quot;">​</a></h3><p>热点key扛着大并发，当热点key失效时，一瞬间大量请求冲击持久层数据库。</p><h3 id="缓存雪崩" tabindex="-1">缓存雪崩 <a class="header-anchor" href="#缓存雪崩" aria-label="Permalink to &quot;缓存雪崩&quot;">​</a></h3><p>当redis中的大量key集体过期，可以理解为Redis中的大部分数据都清空/失效了，这时候如果有大量并发的请求来到，Redis就无法进行有效的响应（命中率急剧下降），也会导致DB先生的绝望。 缓存雪崩的场景通常有两个：</p><ol><li>大量热点key同时过期；</li><li>缓存服务故障或宕机；</li></ol><h2 id="操作" tabindex="-1">操作 <a class="header-anchor" href="#操作" aria-label="Permalink to &quot;操作&quot;">​</a></h2><h3 id="string" tabindex="-1">string <a class="header-anchor" href="#string" aria-label="Permalink to &quot;string&quot;">​</a></h3><ul><li>set [key] [value]</li><li>setex [key] [time] [value]</li><li>setnx [key] [value]</li><li>get [key]</li><li>incr [key]</li><li>incrby [key] [num]</li><li>decr [key] [num]</li><li>decrby [key] [num]</li><li>getrange [key] [start-index] [end-index]</li><li>setrange [key] [start-index] [newValue]</li><li>getset [key] [value]</li></ul><h3 id="list" tabindex="-1">list <a class="header-anchor" href="#list" aria-label="Permalink to &quot;list&quot;">​</a></h3><ul><li>lrange</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lrange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key] [start-index] [last-index]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">e.g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lrange</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list-name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （取出索引0到1的两个元素，包括头和尾的元素）</span></span></code></pre></div><ul><li>lpush, rpush：左插入，有插入元素</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lpush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key] [value]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key] [value]</span></span></code></pre></div><ul><li>lpop，rpop：左取出，右取出元素</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lpop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key]</span></span></code></pre></div><ul><li>lindex：查询指定下标元素</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key] [index]</span></span></code></pre></div><ul><li>llen：查询list列表长度（元素个数）</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">llen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key]</span></span></code></pre></div><h3 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h3><ul><li>sadd（添加）</li><li>smembers（查看所有元素）</li><li>sismember（判断是否存在）</li><li>scard（查看长度）</li><li>srem（移除指定元素）</li><li>sinter（交集）</li><li>sunion（并集）</li><li>sdiff（差集）</li></ul><h3 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h3><ul><li>hset（添加hash）</li><li>hget（查询）</li><li>hgetall（查询所有）</li><li>hdel（删除hash中指定的值）</li><li>hlen（获取hash的长度）s</li><li>hexists（判断key是否存在）操作</li><li>hkeys（获取所有key）</li><li>hvals（获取所有value）</li><li>hincrby（给值加增量）</li><li>hsetnx（存在不添加）</li></ul><h3 id="zset" tabindex="-1">zset <a class="header-anchor" href="#zset" aria-label="Permalink to &quot;zset&quot;">​</a></h3><ul><li>zadd（添加）</li><li>zrange（查询）</li><li>zrangebyscore（排序小-大）</li><li>zrevrange（排序大-小）</li><li>zrangebyscore withscores（查询所有值包含key）</li><li>zrem（移除元素）</li><li>zcard（查看元素个数）</li><li>zcount（查询指定区间内的元素个数）</li></ul><h3 id="其他常用操作" tabindex="-1">其他常用操作 <a class="header-anchor" href="#其他常用操作" aria-label="Permalink to &quot;其他常用操作&quot;">​</a></h3><ul><li>type [key]</li><li>select [database]</li><li>keys *</li><li>expire [key] [time]</li><li>ttl [key]</li><li>exists [key]</li><li>del [key]</li><li>move [key] [database]</li><li>flushall</li><li>clear</li></ul><h3 id="服务器操作" tabindex="-1">服务器操作 <a class="header-anchor" href="#服务器操作" aria-label="Permalink to &quot;服务器操作&quot;">​</a></h3><ul><li>config set requirepass [pwd]</li><li>auth [pwd]</li></ul>`,37)]))}const c=l(t,[["render",n]]);export{u as __pageData,c as default};
