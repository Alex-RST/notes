import{_ as i,c as a,a0 as l,o as n}from"./chunks/framework.DpdyRgfY.js";const E=JSON.parse('{"title":"JNI实践","description":"","frontmatter":{},"headers":[],"relativePath":"src/JNI实践.md","filePath":"src/JNI实践.md"}'),t={name:"src/JNI实践.md"};function e(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="jni实践" tabindex="-1">JNI实践 <a class="header-anchor" href="#jni实践" aria-label="Permalink to &quot;JNI实践&quot;">​</a></h1><h2 id="一、创建-java-类" tabindex="-1">一、创建 Java 类 <a class="header-anchor" href="#一、创建-java-类" aria-label="Permalink to &quot;一、创建 Java 类&quot;">​</a></h2><p>首先，在<strong>windows平台下</strong>，我们需要创建一个 Java 类，声明一个 native 方法。假设这个类叫做 NativeExample。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NativeExample.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NativeExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明一个 native 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> native</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNativeMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 加载本地库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadLibrary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nativeexample&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里的 &quot;nativeexample&quot; 是库的名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        NativeExample example </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NativeExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 调用 native 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNativeMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>注意事项</strong>：</p><ul><li>库名称：使用 System.loadLibrary(&quot;libraryName&quot;) 来加载本地库时，libraryName 是库的基本名称，不包括扩展名，如 .dll 或 .so。</li><li>库路径: 确保动态库文件（如 nativeexample.dll）在 Java 的库路径中，或者在系统的 PATH 环境变量中。</li></ul><h2 id="二、生成头文件" tabindex="-1">二、生成头文件 <a class="header-anchor" href="#二、生成头文件" aria-label="Permalink to &quot;二、生成头文件&quot;">​</a></h2><p>使用 javac 编译 Java 类，并使用 javah 生成 C 头文件。在 JDK 9 及更高版本中，你可以使用 javac -h 生成头文件。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NativeExample.java</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NativeExample.java</span></span></code></pre></div><p>这将生成一个名为 NativeExample.h 的头文件。</p><p><strong>注意事项</strong>：</p><ul><li>头文件生成: 使用 javac -h 命令生成的头文件中会包含 JNI 语法定义，确保你遵循这些定义来实现 C 函数。</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEXPORT jstring JNICALL </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Java_NativeExample_getNativeMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, jobject);</span></span></code></pre></div><ul><li>参数: <ul><li>JNIEnv *env: 指向 JNI 接口的指针，用于调用 JNI 函数。</li><li>jobject obj: 对象实例（如果方法是实例方法）。</li></ul></li><li>返回值的类型需要与 Java 方法的返回类型匹配，例如，返回 jstring 对应于 Java 中的 String 类型。</li></ul><h2 id="三、编写-c-代码" tabindex="-1">三、编写 C 代码 <a class="header-anchor" href="#三、编写-c-代码" aria-label="Permalink to &quot;三、编写 C 代码&quot;">​</a></h2><p>然后，创建一个 C 文件来实现 native 方法。假设这个文件叫做 NativeExample.c。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NativeExample.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;jni.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;NativeExample.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实现 native 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JNIEXPORT jstring JNICALL </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Java_NativeExample_getNativeMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JNIEnv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, jobject </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewStringUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from native code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>注意事项</strong>：</p><ul><li>方法名 Java 中声明的 native 方法的名称必须与 C 中的实现函数名称完全一致。C 中的函数名是由 Java 方法名、类名和方法参数组成的。</li><li>命名规则 Java方法名需要映射到 C 函数名。在 C 代码中，函数的命名规则是 Java_ + 类名_ + 方法名。类名和方法名都用下划线 _ 替换 Java 中的点 . 和其他字符。 例如，Java中的 NativeExample.getNativeMessage() 方法在 C 中实现时的函数名应该是 Java_NativeExample_getNativeMessage。</li><li>Java 数据类型与 JNI 类型的映射: <ul><li>int 映射到 jint</li><li>float 映射到 jfloat</li><li>double 映射到 jdouble</li><li>boolean 映射到 jboolean</li><li>String 映射到 jstring</li><li>Object 映射到 jobject</li></ul></li><li>字符串处理: 使用 (*env)-&gt;NewStringUTF(env, &quot;string&quot;) 来创建 Java 字符串对象，并使用 (*env)-&gt;GetStringUTFChars 和 (*env)-&gt;ReleaseStringUTFChars 来处理 Java 字符串。</li><li>检查 JNI 调用: 你应该检查 JNI 调用是否成功，以防止异常情况。例如，检查 (*env)-&gt;ExceptionCheck(env) 以检测是否有异常发生。</li><li>内存管理: 确保在使用 JNI 提供的内存时，避免内存泄漏，并在不再需要时释放资源。</li></ul><h2 id="四、编译-c-代码生成动态库" tabindex="-1">四、编译 C 代码生成动态库 <a class="header-anchor" href="#四、编译-c-代码生成动态库" aria-label="Permalink to &quot;四、编译 C 代码生成动态库&quot;">​</a></h2><p>在 Windows 上，你可以使用 gcc（来自 MinGW 或其他工具）来编译 C 代码并生成动态库（.dll 文件）。假设你已经安装了 MinGW 并将其路径添加到系统环境变量中。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nativeexample.dll</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%JAVA_HOME%\\include&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%JAVA_HOME%\\include\\win32&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NativeExample.c</span></span></code></pre></div><p>这里 &quot;%JAVA_HOME%&quot; 是你的 JDK 安装目录。</p><h2 id="五、运行java-程序" tabindex="-1">五、运行Java 程序 <a class="header-anchor" href="#五、运行java-程序" aria-label="Permalink to &quot;五、运行Java 程序&quot;">​</a></h2><p>确保 nativeexample.dll 在你的 java 程序的运行路径中，或者在系统的 PATH 环境变量中。然后运行你的 Java 程序：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NativeExample</span></span></code></pre></div><p>你应该会看到输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello from native code</span></span></code></pre></div><h2 id="六、总结" tabindex="-1">六、总结 <a class="header-anchor" href="#六、总结" aria-label="Permalink to &quot;六、总结&quot;">​</a></h2><ol><li>Java 类: 声明 native 方法并加载本地库。</li><li>头文件: 使用 javac -h 生成。</li><li>C 实现: 实现 native 方法。</li><li>编译 C 代码: 生成动态库（.dll 文件）。</li><li>运行 Java 程序: 验证 native 方法是否正常工作。</li></ol><p>注意事项：</p><ul><li>一致性：确保 Java 方法名与 C 函数名一致。</li><li>参数和返回值：正确处理 JNI 数据类型和方法参数。</li><li>错误处理和内存管理：处理 JNI 错误和管理内存。</li><li>库加载：确保动态库可以被正确加载。</li></ul>`,32)]))}const o=i(t,[["render",e]]);export{E as __pageData,o as default};
